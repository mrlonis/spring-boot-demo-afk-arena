plugins {
    id "java"
    id "idea"
    id "jacoco"
    id "org.springframework.boot" version "2.2.13.RELEASE"
    id "io.freefair.lombok" version "5.3.0"
    id "org.flywaydb.flyway" version "6.5.7"
}

group = 'com.mrlonis.springbootdemoafkarena'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

jacoco {
    toolVersion = "0.8.5"
}

def filesToExcludeFromCoverage = [""]

task restartDocker {
    doLast {
        exec {
            //commandLine 'sh', './scripts/restartDocker.sh'
            workingDir = file('./scripts/')
            commandLine = ['cmd', '/C', 'restartDocker', 'restartDocker.bat']
        }
    }
}

test {
    finalizedBy jacocoTestReport
    dependsOn restartDocker
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled = true
        csv.enabled = false
    }

    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it,
                     exclude: filesToExcludeFromCoverage)
        })
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it,
                     exclude: filesToExcludeFromCoverage)
        })
    }

    violationRules {
        rule {
            limit {
                minimum = 0.00
            }
        }
        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }
        }
    }

    mustRunAfter jacocoTestReport
}

check {
    dependsOn jacocoTestCoverageVerification
}

bootRun {
    systemProperties = System.properties as Map<String, ?>
}

build {
    dependsOn jacocoTestReport
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation platform("org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR11")
    implementation platform("org.springframework.boot:spring-boot-dependencies:2.2.13.RELEASE")

    implementation 'com.microsoft.sqlserver:mssql-jdbc:7.0.0.jre8'
    implementation 'com.zaxxer:HikariCP'
    implementation "io.springfox:springfox-boot-starter:3.0.0"
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-integration'
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation 'org.springframework.cloud:spring-cloud-starter-bus-amqp'
    implementation 'org.springframework.integration:spring-integration-core'

    testImplementation 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
}